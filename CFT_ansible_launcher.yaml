AWSTemplateFormatVersion: 2010-09-09
Description: 'AWS CloudFormation Sample AWX Instance: Create a AWX Stack'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: generic-cloud-wk
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  AnsibleRepository:
    Type: String
    Default: 'https://github.com/moffzilla/awx.git'
    Description: The git repository of Ansible playbooks
  AnsiblePlaybook:
    Type: String
    Default: /home/ubuntu/awx/site.yaml
    Description: The Ansible playbook to use
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: UB1604HVMSSD
    t2.nano:
      Arch: UB1604HVMSSD
    t2.micro:
      Arch: UB1604HVMSSD
    t2.small:
      Arch: UB1604HVMSSD
    t2.medium:
      Arch: UB1604HVMSSD
    t2.large:
      Arch: UB1604HVMSSD
  AWSAMIRegionMap:
    AMI:
      UB1604HVMSSD: ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server
    us-east-1:
      UB1604HVMSSD: ami-1d4e7a66
    us-west-1:
      UB1604HVMSSD: ami-4d6a852e
Resources:
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap 
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      UserData:  
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-add-repository ppa:ansible/ansible -y
          sudo apt-get install     apt-transport-https     ca-certificates     curl     gnupg-agent     software-properties-common -y
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update -y
          sudo apt install -y aptitude
          sudo apt-get install -y git
          sudo apt-get install ansible -y
          sudo apt-get install docker-ce docker-ce-cli containerd.io -y
          sudo usermod -aG docker ubuntu
          sudo apt-get install nodejs -y
          sudo apt install nodejs-legacy -y
          sudo apt install npm -y
          sudo apt install python-pip -y
          echo "localhost ansible_connection=local" > /etc/ansible/hosts
          sudo sh -c 'sed -i -e 's/#log_path/log_path/g' /etc/ansible/ansible.cfg'
          sh -c 'sed -i -e 's/all/localhost/g' /home/ubuntu/awx/installer/install.yml'
          sudo apt-get upgrade -y
          sudo pip uninstall docker docker-py docker-compose
          sudo pip install docker-compose
          git clone https://github.com/ansible/awx.git          
          cd awx/installer
          ansible-playbook -i inventory install.yml


 
          #sudo ansible-pull -U  ${AnsibleRepository} -d /home/ubuntu/tempo ${AnsiblePlaybook}
#  NewVolume:
#    Type: 'AWS::EC2::Volume'
#    Properties:
#      Size: '1'
#      AvailabilityZone: !GetAtt 
#        - WebServerInstance
#        - AvailabilityZone
#  MountPoint:
#    Type: 'AWS::EC2::VolumeAttachment'
#    Properties:
#      InstanceId: !Ref WebServerInstance
#      VolumeId: !Ref NewVolume
#      Device: /dev/sdh
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable tcp access for Web and SSH traffic from outside
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: 0.0.0.0/0
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3fb745b0-65ec-4215-8f5f-bbc65b714b94
Outputs:
  AZ:
    Description: 'Instances is running in Availability Zone '
    Value: !GetAtt 
      - WebServerInstance
      - AvailabilityZone
  PublicIP:
    Description: Public IP
    Value: !GetAtt 
      - WebServerInstance
      - PublicIp
  PublicDNS:
    Description: Instance Public DNS Name
    Value: !GetAtt 
      - WebServerInstance
      - PublicDnsName

